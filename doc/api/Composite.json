{
  "type": "Composite",
  "category": "widget",
  "description": "An empty widget that can contain other widgets.",
  "generics": [
    {
      "name": "ChildType",
      "extends": "AnyWidget",
      "default": "Widget",
      "description": "The common widget class of the children this composite can contain."
    }
  ],
  "extends": "Widget",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "properties",
        "type": {
          "interface": "Properties",
          "generics": [
            "Composite"
          ]
        },
        "optional": true,
        "description": "Sets all key-value pairs in the properties object as widget properties."
      }
    ]
  },
  "properties": {
    "jsxAttributes": {
      "const": true,
      "readonly": true,
      "ts_only": true,
      "type": "JSXCompositeAttributes<this, ChildType>"
    },
    "layout": {
      "type": {
        "union": [
          "Layout",
          "null"
        ]
      },
      "const": true,
      "default": "Layout",
      "description": "The layout manager responsible for interpreting the [`layoutData`](./Widget.md#layoutdata) of the child widgets of this Composite."
    },
    "_layout": {
      "private": true,
      "type": "Layout"
    },
    "$children": {
      "private": true,
      "type": {
        "interface": "Array",
        "generics": [
          "Widget"
        ]
      }
    }
  },
  "methods": {
    "append": [
      {
        "parameters": [
          {
            "name": "...widgets",
            "type": {
              "interface": "Array",
              "generics": [
                "Widget"
              ]
            },
            "ts_type": "ChildType[]"
          }
        ],
        "returns": "this",
        "description": "Adds the given widgets to the composite."
      },
      {
        "parameters": [
          {
            "name": "widgets",
            "type": {
              "interface": "Array",
              "generics": [
                "Widget"
              ]
            },
            "ts_type": "ChildType[]"
          }
        ],
        "returns": "this",
        "description": "Adds all widgets in the given array to the composite."
      },
      {
        "parameters": [
          {
            "name": "widgets",
            "type": "WidgetCollection",
            "ts_type": "WidgetCollection<ChildType>"
          }
        ],
        "returns": "this",
        "description": "Adds all widgets in the given collection to the composite."
      }
    ],
    "children": [
      {
        "generics": [
          {
            "name": "Result",
            "extends": "ChildType",
            "default": "ChildType"
          }
        ],
        "parameters": [
          {
            "name": "selector",
            "type": "Selector",
            "ts_type": "Selector<ChildType, Result>",
            "optional": true,
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": {
          "interface": "WidgetCollection",
          "generics": [
            "ChildType"
          ]
        },
        "ts_returns": "WidgetCollection<Result>",
        "description": "Returns a (possibly empty) collection of all children of this widget that match the given selector.\n\nWhen writing custom UI components it may be useful to overwrite this method to prevent access to the internal children by external code. Doing so also affects `find` and `apply`, on this widget as well as on all parents, thereby preventing accidental clashes of widget id or class values. See \"[Encapsulation](../selector.md#encapsulation)\"."
      }
    ],
    "_children": [
      {
        "generics": [
          {
            "name": "Result",
            "extends": "ChildType",
            "default": "ChildType"
          }
        ],
        "protected": true,
        "parameters": [
          {
            "name": "selector",
            "type": "Selector",
            "ts_type": "Selector<ChildType, Result>",
            "optional": true,
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetCollection",
        "ts_returns": "WidgetCollection<Result>",
        "description": "Identical to the `children` method, but intended to be used by subclasses in case the `children` method was overwritten. See \"[Encapsulation](../selector.md#encapsulation)\"."
      }
    ],
    "find": {
      "generics": [
        {
          "name": "Result",
          "extends": "Widget",
          "default": "Widget"
        }
      ],
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "ts_type": "Selector<Widget, Result>",
          "optional": true,
          "description": "A selector expression or a predicate function to filter the results."
        }
      ],
      "returns": "WidgetCollection",
      "ts_returns": "WidgetCollection<Result>",
      "description": "Returns a collection containing all descendants of all widgets in this collection that match the given selector.\n\nIf you wish to always exclude specific \"internal\" children from the result, overwrite the [`children`](#childrenselector) method ([details](#childrenselector)) to return an empty `WidgetCollection`, or use the [`@component`](../databinding/@component.md) decorator. **These children will then only be visible via the protected `_find` method.** See \"[Encapsulation](../selector.md#encapsulation)\""
    },
    "_find": {
      "generics": [
        {
          "name": "Result",
          "extends": "Widget",
          "default": "Widget"
        }
      ],
      "protected": true,
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "ts_type": "Selector<Widget, Result>",
          "optional": true,
          "description": "A selector expression or a predicate function to filter the results."
        }
      ],
      "returns": "WidgetCollection",
      "ts_returns": "WidgetCollection<Result>",
      "description": "Identical to the `find` method, but intended to be used only by subclasses (custom components) that encapsulate their children. This is the case if the `children` method was overwritten or the `@component` decorator is used on the subclass."
    },
    "apply": [
      {
        "generics": [
          {
            "name": "Target",
            "default": "this"
          }
        ],
        "parameters": [
          {
            "name": "options",
            "type": "{<br/>&nbsp;&nbsp;mode?: 'default'&#124;'strict',<br/>&nbsp;&nbsp;trigger?: string<br/>}",
            "ts_type": "{mode?: 'default'|'strict', trigger?: ListenersKeysOf<Target> | 'update' | '*' | symbol}",
            "description": "If mode is set to `'strict'` the function checks that all selector match at least one widget, and that id selector match exactly one widget. <br/>A `trigger` is string to be associated with the given rulset. If set to `'update'`, the ruleset will be applied once immediately and then again every time `apply('update')` is called. If set to any event-attribute name, such as `'onTap'`, it will automatically re-apply the ruleset when this event is triggered. If set to `'*'` if the widget mutates as described [here](./Observable.md#mutationssource)."
          },
          {
            "name": "rules",
            "type": "RuleSet",
            "ts_type": "RuleSet<this>",
            "description": "The ruleset to apply. May also be given as a callback which is passed to the widget instance and must return the actual ruleset. This parameter can also be `null` if the `trigger` option is set. This will stop re-applying the ruleset previously associated with that trigger."
          }
        ],
        "returns": "this",
        "description": "See also the article [\"Selector API\"](../selector.md#compositeapply).<br/><br/>Applies the given attributes to all descendants that match the associated selector(s). Each attributes object may contain properties to be set and listeners to be registered. An entry will be treated as a listener if it follows the naming scheme \"onEventType\". IMPORTANT: Listeners previously registered (for the same type) via the `apply` method, a [JSX](../declarative-ui.md) element attribute or a [widget factory](./utils.md#asfactoryconstructor) call will be de-registered. This means you can call apply repeatedly and have a deterministic outcome. Listeners registered programmatically (e.g. `widget.onTap(...)` are not affected by this.) <br/><br/>For better type safety enable [strict mode](#applymode-rules) and use [`Setter`](./Setter.md) to create properties objects.\n\nIf you wish to always exclude specific \"internal\" children from this, overwrite the `children` method on their parent. See \"[Encapsulation](../selector.md#encapsulation)\".<br/><br/>When using [declarative UI](../declarative-ui.md) syntax \"apply\" is a special attribute that calls this function."
      },
      {
        "parameters": [
          {
            "name": "rules",
            "type": "RuleSet",
            "ts_type": "RuleSet<this>",
            "description": "The ruleset to apply. May also be given as a callback which is passed to the widget instance and must return the actual ruleset."
          }
        ],
        "returns": "this",
        "description": "Shorthand for `apply({mode: 'default'}, rules)`"
      },
      {
        "parameters": [
          {
            "name": "mode",
            "type": {
              "union": [
                "'default'",
                "'strict'"
              ]
            },
            "description": "If this is set to `'strict'` the function checks that all selector match at least one widget, and that id selector match exactly one widget."
          },
          {
            "name": "rules",
            "type": "RuleSet",
            "ts_type": "RuleSet<this>",
            "description": "The ruleset to apply. May also be given as a callback which is passed to the widget instance and must return the actual ruleset."
          }
        ],
        "returns": "this",
        "description": "Shorthand for `apply({mode: mode}, rules})`"
      },
      {
        "parameters": [
          {
            "name": "trigger",
            "type": "'update' | '*'",
            "ts_type": "ListenersKeysOf<this> | 'update' | '*' | symbol"
          }
        ],
        "returns": "this",
        "description": "Applies the ruleset from the last call with `trigger` set to `'update' or '*'`."
      }
    ],
    "_apply": [
      {
        "protected": true,
        "generics": [
          {
            "name": "Target",
            "default": "this"
          }
        ],
        "parameters": [
          {
            "name": "options",
            "type": "{<br/>&nbsp;&nbsp;mode?: 'default'&#124;'strict',<br/>&nbsp;&nbsp;trigger?: string<br/>}",
            "ts_type": "{mode?: 'default'|'strict', trigger?: ListenersKeysOf<Target> | 'update' | '*' | symbol}",
            "description": "If mode is set to `'strict'` the function checks that all selector match at least one widget, and that id selector match exactly one widget. <br/>A `trigger` is string to be associated with the given rulset. If set to `'update'`, the ruleset will be applied once immediately and then again every time `apply('update')` is called. If set to any event-attribute name, such as `'onTap'`, it will automatically re-apply the ruleset when this event is triggered."
          },
          {
            "name": "rules",
            "type": "RuleSet",
            "ts_type": "RuleSet<this>",
            "description": "The ruleset to apply. May also be given as a callback which is passed to the widget instance and must return the actual ruleset."
          }
        ],
        "returns": "this",
        "description": "Identical to the `apply(options, rules)` method, but intended to be used by subclasses in case the `children` method was overwritten . See \"[Encapsulation](../selector.md#encapsulation)\""
      },
      {
        "protected": true,
        "parameters": [
          {
            "name": "rules",
            "type": "RuleSet",
            "ts_type": "RuleSet<this>",
            "description": "The ruleset to apply. May also be given as a callback which is passed to the widget instance and must return the actual ruleset."
          }
        ],
        "returns": "this",
        "description": "Identical to the `apply(rules)` method, but intended to be used by subclasses in case the `children` method was overwritten . See \"[Encapsulation](../selector.md#encapsulation)\""
      },
      {
        "protected": true,
        "parameters": [
          {
            "name": "mode",
            "type": {
              "union": [
                "'default'",
                "'strict'"
              ]
            },
            "description": "If this is set to `'strict'` the function checks that all selector match at least one widget, and that id selector match exactly one widget."
          },
          {
            "name": "rules",
            "type": "RuleSet",
            "ts_type": "RuleSet<this>",
            "description": "The ruleset to apply. May also be given as a callback which is passed to the widget instance and must return the actual ruleset."
          }
        ],
        "returns": "this",
        "description": "Identical to the `apply(mode, rules)` method, but intended to be used by subclasses in case the `children` method was overwritten . See \"[Encapsulation](../selector.md#encapsulation)\""
      },
      {
        "protected": true,
        "parameters": [
          {
            "name": "trigger",
            "type": "'update' | '*'",
            "ts_type": "ListenersKeysOf<this> | 'update' | '*' | symbol"
          }
        ],
        "returns": "this",
        "description": "Applies the ruleset from the last call with `trigger` set to `'update' or '*'`."
      }
    ],
    "_initLayout": {
      "protected": true,
      "parameters": [
        {
          "name": "props",
          "type": {
            "map": {
              "layout": {
                "type": "Layout",
                "optional": true
              }
            }
          },
          "optional": true
        }
      ],
      "description": "Called with the constructor paramter (if any) to initialize the composite's layout manager. May be overwritten to customize/replace the layout. The new implementation must make a super call to initialize the layout."
    },
    "_checkLayout": {
      "protected": true,
      "parameters": [
        {
          "name": "value",
          "type": "Layout"
        }
      ],
      "description": "Called by the framework with the layout about to be assigned to this composite. May be overwritten to reject a layout by throwing an Error."
    },
    "_acceptChild": {
      "protected": true,
      "parameters": [
        {
          "name": "child",
          "type": "Widget"
        }
      ],
      "returns": "boolean",
      "description": "Called by the framework with each widget that is about to be added as a child of this composite. May be overwritten to reject some or all children by returning `false`."
    },
    "_addChild": {
      "protected": true,
      "parameters": [
        {
          "name": "child",
          "type": "Widget"
        },
        {
          "name": "index",
          "type": "number",
          "optional": true
        }
      ],
      "description": "Called by the framework with a child to be assigned to this composite. Triggers the 'addChild' event. May be overwritten to run any code prior or after the child is inserted."
    },
    "_removeChild": {
      "protected": true,
      "parameters": [
        {
          "name": "child",
          "type": "Widget"
        }
      ],
      "description": "Called by the framework with a child to be removed from this composite. Triggers the 'removeChild' event. May be overwritten to run any code prior or after the child is removed."
    },
    "_scheduleRenderChildren": {
      "private": true
    },
    "$flushChildren": {
      "private": true
    }
  },
  "events": {
    "addChild": {
      "description": "Fired when a child is added to this widget.",
      "parameters": {
        "child": {
          "description": "The widget that is added as a child.",
          "type": "Widget"
        },
        "index": {
          "description": "Denotes the position in the children list at which the child widget is added.",
          "type": "number"
        }
      }
    },
    "removeChild": {
      "description": "Fired when a child is removed from this widget.",
      "parameters": {
        "child": {
          "description": "The widget that is removed.",
          "type": "Widget"
        },
        "index": {
          "description": "The property `index` denotes the removed child widget's position in the children list.`",
          "type": "number"
        }
      }
    }
  },
  "relatedTypes": {
    "RuleSet": "ruleset",
    "RuleSetObject": "rulesetobject",
    "RuleSetCallback": "rulesetcallback"
  },
  "links": [
    {
      "title": "Creating a simple `Composite`",
      "snippet": "composite.jsx"
    }
  ]
}
