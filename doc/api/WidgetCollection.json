{
  "type": "WidgetCollection",
  "category": "widget",
  "generics": [
    {
      "name": "WidgetType",
      "extends": "AnyWidget",
      "default": "Widget",
      "description": "The common type of all widgets in this collection."
    }
  ],
  "description": "A `WidgetCollection` is an array-like object representing a set of widgets, as returned by the widget methods `children` and `find`. It combines a subset of the JavaScript Array API with a subset of the Tabris.js Widget API. Like an array, the widgets within the collection may be accessed directly using the `[index]` syntax. The number of widgets is stored in the `length` field. Instances of *WidgetCollection* are immutable.\n\nCalls to `set` or `animate` change the given properties for all widgets in the collection. Similarly, the `on`, `off` and `once` methods will add/remove the given listener to/from all widgets. When `get` is used, the value of the first widget in the collection is returned.\n\nWidgetCollection can also in JSX as a means of creating a group of widgets to append to the same parent. To shorten this common use case the `WidgetCollection` is also available as the alias [\"$\"](./$.md). This alias still needs to be imported from the tabris module though.",
  "constructor": {
    "access": "public",
    "parameters": [
      {
        "name": "widgets",
        "type": {
          "interface": "Array",
          "generics": [
            "Widget"
          ]
        },
        "optional": true,
        "description": "Array of widgets to include in the WidgetCollection"
      }
    ]
  },
  "methods": {
    "on": {
      "parameters": [
        {
          "name": "event",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "Function"
        },
        {
          "name": "context",
          "type": "this",
          "optional": true,
          "description": "In the listener function, `this` will point to this object."
        }
      ],
      "returns": "this",
      "description": "Adds the given listener to all widgets in this collection. See also `Widget.on()`."
    },
    "once": {
      "parameters": [
        {
          "name": "event",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "Function"
        },
        {
          "name": "context",
          "type": "this",
          "optional": true,
          "description": "In the listener function, `this` will point to this object."
        }
      ],
      "returns": "this",
      "description": "Adds the given listener for single execution on all widgets in this collection. See also `Widget.once()`."
    },
    "off": {
      "parameters": [
        {
          "name": "event",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "Function"
        },
        {
          "name": "context",
          "optional": true,
          "type": "this"
        }
      ],
      "returns": "this",
      "description": "Removes the given listener from all widgets in this collection. See also `Widget.off()`."
    },
    "trigger": {
      "parameters": [
        {
          "name": "type",
          "type": "string",
          "description": "The type of event to trigger"
        },
        {
          "name": "eventData",
          "type": "object",
          "optional": true,
          "description": "The data to pass to listener functions."
        }
      ],
      "returns": "this",
      "description": "Triggers an event of the given type on all widgets in this collection and passes the fields of the given *object* to all listeners`"
    },
    "set": [
      {
        "parameters": [
          {
            "name": "properties",
            "type": {
              "interface": "Properties",
              "generics": [
                "WidgetType"
              ]
            }
          }
        ],
        "description": "Sets all key-value pairs in the properties object on all widgets in this collection. See also `Widget.set()`.",
        "returns": "this"
      }
    ],
    "children": [
      {
        "generics": [
          {
            "name": "Result",
            "extends": "Widget",
            "default": "Widget"
          }
        ],
        "parameters": [
          {
            "name": "selector",
            "type": "Selector",
            "ts_type": "Selector<Widget, Result>",
            "optional": true,
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetCollection",
        "ts_returns": "WidgetCollection<Result>",
        "description": "Returns a collection containing all children of all widgets in this collection that match the given selector."
      }
    ],
    "parent": {
      "parameters": [],
      "returns": "WidgetCollection",
      "ts_returns": "WidgetCollection<Widget>",
      "description": "Returns a collection containing all direct parents of the widgets in this collection."
    },
    "appendTo": {
      "parameters": [
        {
          "name": "parent",
          "type": "Composite",
          "description": "The parent widget to append to."
        }
      ],
      "returns": "this",
      "description": "Appends all widgets in this collection to the given parent widget."
    },
    "animate": {
      "parameters": [
        {
          "name": "properties",
          "type": {
            "map": {
              "transform": {
                "type": "Transformation",
                "optional": true
              },
              "opacity": {
                "type": "number",
                "optional": true
              }
            }
          },
          "description": "The properties and target values to animate."
        },
        {
          "name": "options",
          "type": "AnimationOptions",
          "description": "Configures the animation itself."
        }
      ],
      "description": "Animates all widgets in this collection."
    },
    "dispose": {
      "parameters": [],
      "description": "Disposes all widgets in this collection."
    },
    "detach": {
      "parameters": [],
      "description": "Detaches all widgets in this collection from their parent."
    },
    "first": [
      {
        "generics": [
          {
            "name": "Result",
            "extends": "WidgetType",
            "default": "WidgetType"
          }
        ],
        "parameters": [
          {
            "name": "selector",
            "type": "Selector",
            "ts_type": "Selector<WidgetType, Result>",
            "optional": true,
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetType",
        "ts_returns": "Result|undefined",
        "description": "Returns the first widget in the collection that is matched by the selector. Without selector, it is the same as `collection[0]`."
      }
    ],
    "only": [
      {
        "generics": [
          {
            "name": "Result",
            "extends": "WidgetType",
            "default": "WidgetType"
          }
        ],
        "parameters": [
          {
            "name": "selector",
            "type": "Selector",
            "ts_type": "Selector<WidgetType, Result>",
            "optional": true,
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetType",
        "ts_returns": "Result",
        "description": "Returns the only widget in the collection that is matched by the selector. If there is more or less than one match the method throws en Error. Without a selector the widget collection needs to have exactly one entry."
      }
    ],
    "last": [
      {
        "generics": [
          {
            "name": "Result",
            "extends": "WidgetType",
            "default": "WidgetType"
          }
        ],
        "parameters": [
          {
            "name": "selector",
            "type": "Selector",
            "ts_type": "Selector<WidgetType, Result>",
            "optional": true,
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetType",
        "ts_returns": "Result | undefined",
        "description": "Returns the last widget in the collection that is matched by the selector. Without selector, it is the same as `collection[collection.length - 1]`."
      },
      {
        "ts_only": true,
        "generics": [
          {
            "name": "U",
            "extends": "Widget"
          }
        ],
        "parameters": [
          {
            "name": "constructor",
            "type": "{ new (...args: any[]): U } | undefined",
            "description": "A class to filter the results."
          }
        ],
        "returns": "U",
        "description": "Returns the last widget in the collection that is an instance of the given class."
      }
    ],
    "toArray": {
      "parameters": [],
      "returns": {
        "interface": "Array",
        "generics": [
          "WidgetType"
        ]
      },
      "description": "Returns an Array containing all widgets in the collection."
    },
    "forEach": {
      "parameters": [
        {
          "name": "callback",
          "type": {
            "callback": [
              {
                "name": "widget",
                "type": "WidgetType"
              },
              {
                "name": "index",
                "type": "number"
              },
              {
                "name": "collection",
                "type": {
                  "interface": "WidgetCollection",
                  "generics": [
                    "WidgetType"
                  ]
                }
              }
            ],
            "returns": {
              "type": "void"
            }
          },
          "description": "The function to call."
        }
      ],
      "description": "Calls the given callback function once for each widget in the collection."
    },
    "map": [
      {
        "parameters": [
          {
            "name": "callback",
            "type": {
              "callback": [
                {
                  "name": "widget",
                  "type": "WidgetType"
                },
                {
                  "name": "index",
                  "type": "number"
                },
                {
                  "name": "collection",
                  "type": {
                    "interface": "WidgetCollection",
                    "generics": [
                      "WidgetType"
                    ]
                  }
                }
              ],
              "returns": {
                "type": "any"
              }
            },
            "description": "The function to call for each widget."
          }
        ],
        "returns": {
          "interface": "Array",
          "generics": [
            "any"
          ]
        },
        "description": "Calls the given callback function once for each widget in the collection and returns an array with the return values of each call."
      },
      {
        "ts_only": true,
        "generics": [
          {
            "name": "U"
          }
        ],
        "parameters": [
          {
            "name": "callback",
            "type": "(widget: WidgetType, index: number, collection: WidgetCollection<WidgetType>) => U",
            "description": "The function to call for each widget. The arguments are: *widget*, *index*, *collection*"
          }
        ],
        "returns": {
          "interface": "Array",
          "generics": [
            "U"
          ]
        },
        "description": "Calls the given callback function once for each widget in the collection and returns an array with the return values of each call."
      }
    ],
    "filter": [
      {
        "generics": [
          {
            "name": "Result",
            "extends": "WidgetType",
            "default": "WidgetType"
          }
        ],
        "parameters": [
          {
            "name": "selector",
            "type": {
              "interface": "Selector",
              "generics": [
                "WidgetType, Result"
              ]
            },
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": {
          "interface": "WidgetCollection",
          "generics": [
            "WidgetType"
          ]
        },
        "ts_returns": "WidgetCollection<Result>",
        "description": "Returns a new *WidgetCollection* containing all widgets in this collection that match the given selector."
      }
    ],
    "indexOf": {
      "parameters": [
        {
          "name": "widget",
          "type": "Widget",
          "ts_type": "WidgetType",
          "description": "The widget to locate in the collection."
        }
      ],
      "returns": "number",
      "description": "Returns the index of the given widget within the collection, or `-1` if the widget is not present."
    },
    "includes": {
      "parameters": [
        {
          "name": "widget",
          "type": "Widget",
          "ts_type": "WidgetType",
          "description": "The widget to search in the collection."
        }
      ],
      "returns": "boolean",
      "description": "Returns `true` if the given widget is included in the collection, `false` otherwise."
    },
    "concat": [
      {
        "returns": {
          "interface": "WidgetCollection",
          "generics": [
            "WidgetType"
          ]
        },
        "description": "Returns a clone of this *WidgetCollection* containing all widgets in this collection."
      },
      {
        "generics": [
          {
            "name": "AddedType",
            "extends": "Widget",
            "default": "Widget"
          }
        ],
        "parameters": [
          {
            "name": "...items",
            "ts_type": "Array<AddedType|AddedType[]|WidgetCollection<AddedType>>",
            "type": {
              "interface": "Array",
              "generics": [
                {
                  "union": [
                    "Widget",
                    {
                      "interface": "Array",
                      "generics": [
                        "Widget"
                      ]
                    },
                    "WidgetCollection"
                  ]
                }
              ]
            }
          }
        ],
        "returns": {
          "interface": "WidgetCollection",
          "generics": [
            "Widget"
          ]
        },
        "ts_returns": "WidgetCollection<AddedType | WidgetType>",
        "description": "Returns a new *WidgetCollection* containing all widgets in this collection and those given as arguments."
      }
    ],
    "slice": [
      {
        "parameters": [
          {
            "optional": true,
            "name": "start",
            "type": "number",
            "description": "The beginning of the specified portion of the collection."
          },
          {
            "optional": true,
            "name": "end",
            "type": "number",
            "description": "The end of the specified portion of the collection."
          }
        ],
        "returns": {
          "interface": "WidgetCollection",
          "generics": [
            "WidgetType"
          ]
        },
        "description": "Returns a new *WidgetCollection* containing a section of this collection."
      }
    ]
  },
  "properties": {
    "jsxAttributes": {
      "const": true,
      "readonly": true,
      "ts_only": true,
      "type": "{children?: JSXChildren<WidgetType>}"
    },
    "[JSX.jsxFactory]": {
      "description": "This function is called by the framework to create JSX elements from the WidgetCollection class.",
      "type": "JSX.JsxFactory",
      "const": true,
      "readonly": true,
      "ts_only": true
    },
    "length": {
      "const": true,
      "type": "number",
      "readonly": true,
      "description": "Contains the number of widgets in the collection."
    },
    "host": {
      "const": true,
      "type": "Widget",
      "readonly": true,
      "description": "The widget this WidgetCollection was created from. Corresponds to the ':host' selector."
    },
    "[key: number]": {
      "readonly": true,
      "const": true,
      "ts_only": true,
      "type": "WidgetType"
    }
  }
}
